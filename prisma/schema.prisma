// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  customerId      String         @unique
  name            String
  email           String         @unique
  dob             DateTime
  password        String
  accountNumber   String         @unique
  ifscCode        String // Fixed typo (was ifceCode)
  panNumber       String
  aadhaarNumber   String // Fixed typo (was adharnumber)
  phoneNumber     String         @unique
  plan            PlanType       @default(seed)
  isActive        Boolean        @default(false)
  isEmailVerified Boolean        @default(false)
  isPhoneVerified Boolean        @default(false)
  firstLogin      Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  balances        Balance[]
  withdrawals     Withdrawal[]
  deposits        Deposit[]
  notifications   Notification[]
  fcmTokens       FCMToken[]
}

model Balance {
  id                       String   @id @default(cuid())
  userId                   String
  user                     User     @relation(fields: [userId], references: [id])
  plan                     PlanType
  balance                  Float    @default(0.0)
  pendingWithdrawalBalance Float    @default(0.0)
  pendingDepositBalance    Float    @default(0.0)
  rewardBalance            Float    @default(0.0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([userId, plan])
}

enum PlanType {
  seed
  plant
  tree
}

model Withdrawal {
  id            String            @id @default(cuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id])
  amount        Float
  transactionId String            @unique // Added unique constraint
  withdrawalId  String            @unique
  balanceBefore Float
  type          WithdrawalType
  status        TransactionStatus
  remarks       String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum WithdrawalType {
  full
  rewardOnly
  custom
}

model Deposit {
  id            String            @id @default(cuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id])
  amount        Float
  balanceBefore Float
  transactionId String            @unique // Added unique constraint
  depositId     String            @unique // Fixed typo (was DepositeId)
  utr           String?
  status        TransactionStatus
  remarks       String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum TransactionStatus {
  pending
  proceed
  failed
}

model RewardRateSetting {
  id        String   @id @default(cuid())
  plan      PlanType @unique
  rate      Float    @default(0.01)
  updatedAt DateTime @updatedAt
}

model NonRewardDay {
  id        String   @id @default(cuid())
  date      DateTime @unique
  reason    String?
  createdBy String
  createdAt DateTime @default(now())
}

model RewardTransaction {
  id              String   @id @default(cuid())
  userId          String
  plan            PlanType
  principalAmount Float
  rewardRate      Float
  rewardAmount    Float
  creditedAt      DateTime
  balanceId       String
}


model Notification {
  id       String                @id @default(cuid())
  userId   String
  user     User                  @relation(fields: [userId], references: [id])
  title    String
  message  String
  type     NotificationType
  channel  NotificationChannel[]
  sentAt   DateTime              @default(now())
  isRead   Boolean               @default(false)
  metadata Json?

  @@index([userId])
}

enum NotificationType {
  reward
  withdrawal
  upgrade
  general
  alert
}

enum NotificationChannel {
  email
  push
  sms
}

model FCMToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  platform  String
  createdAt DateTime @default(now())

  @@index([userId])
}

// Added for audit trails
model AuditLog {
  id        String   @id @default(cuid())
  action    String // e.g., "USER_CREATED", "WITHDRAWAL_APPROVED"
  userId    String? // Admin/user ID
  metadata  Json? // Action details
  createdAt DateTime @default(now())
}

model Admin {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String // Store hashed password
  name      String
  role      AdminRole @default(admin)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum AdminRole {
  admin
  superadmin
}
